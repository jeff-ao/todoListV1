import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import usuarioRoutes from "./routes/usuarioRoutes.js";
import databaseConfig from "./database/databaseConfig.js";
import tarefaRoutes from "./routes/tarefaRoutes.js";
import swaggerUi from "swagger-ui-express";
import swaggerJsDoc from "swagger-jsdoc";

// Carrega as vari√°veis de ambiente do arquivo .env
// √â importante que isso seja feito no in√≠cio
dotenv.config();

const app = express();
const port = process.env.PORT || 3001; // Boa pr√°tica: usar porta do ambiente ou padr√£o

const swaggerOptions = {
  swaggerDefinition: {
    openapi: "3.0.0",
    info: {
      title: "Todo List API",
      version: "1.0.0",
      description: "API para gereciamento de tarefas",
    },
    servers: [
      {
        url: `http://localhost:${port}`,
      },
    ],
  },
  apis: ["./routes/*.js"],
};

const swaggerDocs = swaggerJsDoc(swaggerOptions);

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use("/usuarios", usuarioRoutes);
app.use("/tarefas", tarefaRoutes);
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocs));

// Fun√ß√£o ass√≠ncrona para iniciar o servidor
const startServer = async () => {
  try {
    // 1. Inicia a conex√£o com o banco e cria as tabelas se n√£o existirem
    await databaseConfig.startDatabase();

    // 2. S√≥ depois que o banco estiver pronto, o servidor come√ßa a ouvir
    app.listen(port, () => {
      console.log(`Servidor rodando na porta ${port} üî•`);
      console.log(
        `Documenta√ß√£o da API dispon√≠vel em http://localhost:${port}/api-docs`
      );
    });
  } catch (error) {
    console.error("Falha ao iniciar o servidor:", error);
    process.exit(1); // Encerra a aplica√ß√£o se n√£o conseguir conectar ao banco
  }
};

// Inicia a aplica√ß√£o
startServer();
